'use babel';

time_last_lint = new Date().getTime();
lint_waiting = false;

CompositeDisposable = require('atom').CompositeDisposable;

module.exports = {
  config: {
    execPath: {
      title: "GCC Executable Path",
      description: "Note for Windows/Mac OS X users: please ensure that GCC is in your ```$PATH``` otherwise the linter might not work. If your path contains spaces, it needs to be enclosed in double quotes.",
      type: "string",
      'default': "/usr/bin/g++",
      order: 1
    },
    gccDefaultCFlags: {
      title: "C Flags",
      description: "Supports the use of escaped characters",
      type: "string",
      'default': "-c -Wall",
      order: 2
    },
    gccDefaultCppFlags: {
      title: "C++ Flags",
      description: "Supports the use of escaped characters",
      type: "string",
      'default': "-c -Wall -std=c++11",
      order: 3
    },
    gccIncludePaths: {
      title: "GCC Include Paths",
      description: "Enter your include paths as a comma-separated list. Paths starting with ```.``` or ```..``` are expanded relative to the project root path and paths starting with a ```-``` are expanded relative to the path of the active file. If any of your paths contain spaces, they need to be enclosed in double quotes. To expand a directory recursively, add ```/*``` to the end of the path",
      type: "string",
      'default': " ",
      order: 4
    },
    gccErrorLimit: {
      title: "GCC Error Limit",
      description: "To completely remove `-fmax-errors`, simply enter `-1` here.",
      type: "integer",
      'default': 0,
      order: 5
    },
    gccSuppressWarnings: {
      title: "Suppress GCC Warnings",
      type: "boolean",
      'default': false,
      order: 6
    },
    gccErrorString: {
      title: "String GCC prepends to errors",
      type: "string",
      'default': "error",
      order: 7
    },
    gccWarningString: {
      title: "String GCC prepends to warnings",
      type: "string",
      'default': "warning",
      order: 8
    },
    gccNoteString: {
      title: "String GCC prepends to notes",
      type: "string",
      'default': "note",
      order: 9
    },
    gccLintOnTheFly: {
      title: "Lint on-the-fly",
      description: "Please ensure any auto-saving packages are disabled before using this feature",
      type: "boolean",
      'default': false,
      order: 10
    },
    gccLintOnTheFlyInterval: {
      title: "Lint on-the-fly Interval",
      description: "Time interval (in ms) between linting",
      type: "integer",
      'default': 300,
      order: 11
    },
    gccDebug: {
      title: "Show Debugging Messages",
      description: "Please read the linter-gcc wiki [here](https://github.com/hebaishi/linter-gcc/wiki) before reporting any issues.",
      type: "boolean",
      'default': false,
      order: 12
    }
  },

  messages: {},
  linter_gcc: undefined,

  temp_file: {
    "C++": require("tempfile")(".cpp"),
    "C": require("tempfile")(".c")
  },

  lint: function lint(editor, linted_file, real_file) {
    var helpers = require("atom-linter");
    var regex = '(?<file>.+):(?<line>\\d+):(?<col>\\d+):\\s*\\w*\\s*(?<type>(' + atom.config.get("linter-gcc.gccErrorString") + '|' + atom.config.get("linter-gcc.gccWarningString") + '|' + atom.config.get("linter-gcc.gccNoteString") + ')):\\s*(?<message>.*)';
    command = require("./utility").buildCommand(editor, linted_file);
    return helpers.exec(command.binary, command.args, { stream: "stderr" }).then(function (output) {
      msgs = helpers.parse(output, regex);
      msgs.forEach(function (entry) {
        if (entry.filePath === module.exports.temp_file["C"] || entry.filePath === module.exports.temp_file["C++"]) {
          entry.filePath = real_file;
        }
      });
      if (msgs.length == 0 && output.indexOf("error") != -1) {
        msgs = [{
          type: 'error',
          text: output,
          filePath: real_file
        }];
      }
      module.exports.messages[real_file] = msgs;
      // console.log(msgs)
      if (typeof module.exports.linter_gcc != "undefined") {
        module.exports.linter_gcc.setMessages(JSON.parse(JSON.stringify(require("./utility").flattenHash(module.exports.messages))));
      }
      return msgs;
    });
  },

  activate: function activate() {
    this.subscriptions = new CompositeDisposable();
    if (!atom.packages.getLoadedPackages("linter")) {
      atom.notifications.addError("Linter package not found.", {
        detail: "Please install the `linter` package in your Settings view."
      });
    }
    require("atom-package-deps").install("linter-gcc");
    time_last_lint = new Date().getTime();
    lint_waiting = false;
  },
  deactivate: function deactivate() {
    this.subscriptions.dispose();
  },
  consumeLinter: function consumeLinter(indieRegistry) {
    module.exports.linter_gcc = indieRegistry.register({
      name: 'GCC'
    });

    subs = this.subscriptions;
    utility = require("./utility");
    lintOnTheFly = function () {
      editor = utility.getValidEditor(atom.workspace.getActiveTextEditor());
      if (!editor) return;
      if (atom.config.get("linter-gcc.gccLintOnTheFly") == false) return;
      if (lint_waiting) return;
      lint_waiting = true;
      interval = atom.config.get("linter-gcc.gccLintOnTheFlyInterval");
      time_now = new Date().getTime();
      timeout = interval - (time_now - time_last_lint);
      setTimeout(function () {
        time_last_lint = new Date().getTime();
        lint_waiting = false;
        grammar_type = utility.grammarType(editor.getGrammar().name);
        filename = String(module.exports.temp_file[grammar_type]);
        require('fs-extra').outputFileSync(filename, editor.getText());
        module.exports.lint(editor, filename, editor.getPath());
      }, timeout);
    };

    lintOnSave = function () {
      editor = utility.getValidEditor(atom.workspace.getActiveTextEditor());
      if (!editor) return;
      if (atom.config.get("linter-gcc.gccLintOnTheFly") == true) return;
      real_file = editor.getPath();
      module.exports.lint(editor, real_file, real_file);
    };

    cleanupMessages = function () {
      editor_hash = {};
      atom.workspace.getTextEditors().forEach(function (entry) {
        try {
          path = entry.getPath();
        } catch (err) {}
        editor_hash[entry.getPath()] = 1;
      });
      for (var file in module.exports.messages) {
        if (!editor_hash.hasOwnProperty(file)) {
          delete module.exports.messages[file];
        }
      }
      module.exports.linter_gcc.setMessages(JSON.parse(JSON.stringify(require("./utility").flattenHash(module.exports.messages))));
    };

    subs.add(module.exports.linter_gcc);

    atom.workspace.observeTextEditors(function (editor) {
      subs.add(editor.onDidSave(lintOnSave));
      subs.add(editor.onDidStopChanging(lintOnTheFly));
      subs.add(editor.onDidDestroy(cleanupMessages));
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3Rha2Fha2kvLmF0b20vcGFja2FnZXMvbGludGVyLWdjYy9saWIvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUE7O0FBRVgsY0FBYyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDckMsWUFBWSxHQUFHLEtBQUssQ0FBQTs7QUFFcEIsbUJBQW1CLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLG1CQUFtQixDQUFDOztBQUUxRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsUUFBTSxFQUFFO0FBQ04sWUFBUSxFQUFFO0FBQ1IsV0FBSyxFQUFFLHFCQUFxQjtBQUM1QixpQkFBVyxFQUFFLDZMQUE2TDtBQUMxTSxVQUFJLEVBQUUsUUFBUTtBQUNkLGlCQUFTLGNBQWM7QUFDdkIsV0FBSyxFQUFHLENBQUM7S0FDVjtBQUNELG9CQUFnQixFQUFFO0FBQ2hCLFdBQUssRUFBRSxTQUFTO0FBQ2hCLGlCQUFXLEVBQUUsd0NBQXdDO0FBQ3JELFVBQUksRUFBRSxRQUFRO0FBQ2QsaUJBQVMsVUFBVTtBQUNuQixXQUFLLEVBQUcsQ0FBQztLQUNWO0FBQ0Qsc0JBQWtCLEVBQUU7QUFDbEIsV0FBSyxFQUFFLFdBQVc7QUFDbEIsaUJBQVcsRUFBRSx3Q0FBd0M7QUFDckQsVUFBSSxFQUFFLFFBQVE7QUFDZCxpQkFBUyxxQkFBcUI7QUFDOUIsV0FBSyxFQUFHLENBQUM7S0FDVjtBQUNELG1CQUFlLEVBQUU7QUFDZixXQUFLLEVBQUUsbUJBQW1CO0FBQzFCLGlCQUFXLEVBQUUsMlhBQTJYO0FBQ3hZLFVBQUksRUFBRSxRQUFRO0FBQ2QsaUJBQVMsR0FBRztBQUNaLFdBQUssRUFBRyxDQUFDO0tBQ1Y7QUFDRCxpQkFBYSxFQUFFO0FBQ2IsV0FBSyxFQUFFLGlCQUFpQjtBQUN4QixpQkFBVyxFQUFFLDhEQUE4RDtBQUMzRSxVQUFJLEVBQUUsU0FBUztBQUNmLGlCQUFTLENBQUM7QUFDVixXQUFL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QUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUNyQztPQUNGO0FBQ0QsWUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDOUgsQ0FBQzs7QUFFRixRQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7O0FBRW5DLFFBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsVUFBUyxNQUFNLEVBQUU7QUFDakQsVUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7QUFDdEMsVUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQTtBQUNoRCxVQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTtLQUMvQyxDQUFDLENBQUE7R0FDSDtDQUNGLENBQUEiLCJmaWxlIjoiL2hvbWUvdGFrYWFraS8uYXRvbS9wYWNrYWdlcy9saW50ZXItZ2NjL2xpYi9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcblxudGltZV9sYXN0X2xpbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxubGludF93YWl0aW5nID0gZmFsc2VcblxuQ29tcG9zaXRlRGlzcG9zYWJsZSA9IHJlcXVpcmUoJ2F0b20nKS5Db21wb3NpdGVEaXNwb3NhYmxlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29uZmlnOiB7XG4gICAgZXhlY1BhdGg6IHtcbiAgICAgIHRpdGxlOiBcIkdDQyBFeGVjdXRhYmxlIFBhdGhcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIk5vdGUgZm9yIFdpbmRvd3MvTWFjIE9TIFggdXNlcnM6IHBsZWFzZSBlbnN1cmUgdGhhdCBHQ0MgaXMgaW4geW91ciBgYGAkUEFUSGBgYCBvdGhlcndpc2UgdGhlIGxpbnRlciBtaWdodCBub3Qgd29yay4gSWYgeW91ciBwYXRoIGNvbnRhaW5zIHNwYWNlcywgaXQgbmVlZHMgdG8gYmUgZW5jbG9zZWQgaW4gZG91YmxlIHF1b3Rlcy5cIixcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBkZWZhdWx0OiBcIi91c3IvYmluL2crK1wiLFxuICAgICAgb3JkZXIgOiAxXG4gICAgfSxcbiAgICBnY2NEZWZhdWx0Q0ZsYWdzOiB7XG4gICAgICB0aXRsZTogXCJDIEZsYWdzXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJTdXBwb3J0cyB0aGUgdXNlIG9mIGVzY2FwZWQgY2hhcmFjdGVyc1wiLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGRlZmF1bHQ6IFwiLWMgLVdhbGxcIixcbiAgICAgIG9yZGVyIDogMlxuICAgIH0sXG4gICAgZ2NjRGVmYXVsdENwcEZsYWdzOiB7XG4gICAgICB0aXRsZTogXCJDKysgRmxhZ3NcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlN1cHBvcnRzIHRoZSB1c2Ugb2YgZXNjYXBlZCBjaGFyYWN0ZXJzXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZGVmYXVsdDogXCItYyAtV2FsbCAtc3RkPWMrKzExXCIsXG4gICAgICBvcmRlciA6IDNcbiAgICB9LFxuICAgIGdjY0luY2x1ZGVQYXRoczoge1xuICAgICAgdGl0bGU6IFwiR0NDIEluY2x1ZGUgUGF0aHNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkVudGVyIHlvdXIgaW5jbHVkZSBwYXRocyBhcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0LiBQYXRocyBzdGFydGluZyB3aXRoIGBgYC5gYGAgb3IgYGBgLi5gYGAgYXJlIGV4cGFuZGVkIHJlbGF0aXZlIHRvIHRoZSBwcm9qZWN0IHJvb3QgcGF0aCBhbmQgcGF0aHMgc3RhcnRpbmcgd2l0aCBhIGBgYC1gYGAgYXJlIGV4cGFuZGVkIHJlbGF0aXZlIHRvIHRoZSBwYXRoIG9mIHRoZSBhY3RpdmUgZmlsZS4gSWYgYW55IG9mIHlvdXIgcGF0aHMgY29udGFpbiBzcGFjZXMsIHRoZXkgbmVlZCB0byBiZSBlbmNsb3NlZCBpbiBkb3VibGUgcXVvdGVzLiBUbyBleHBhbmQgYSBkaXJlY3RvcnkgcmVjdXJzaXZlbHksIGFkZCBgYGAvKmBgYCB0byB0aGUgZW5kIG9mIHRoZSBwYXRoXCIsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgZGVmYXVsdDogXCIgXCIsXG4gICAgICBvcmRlciA6IDRcbiAgICB9LFxuICAgIGdjY0Vycm9yTGltaXQ6IHtcbiAgICAgIHRpdGxlOiBcIkdDQyBFcnJvciBMaW1pdFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiVG8gY29tcGxldGVseSByZW1vdmUgYC1mbWF4LWVycm9yc2AsIHNpbXBseSBlbnRlciBgLTFgIGhlcmUuXCIsXG4gICAgICB0eXBlOiBcImludGVnZXJcIixcbiAgICAgIGRlZmF1bHQ6IDAsXG4gICAgICBvcmRlciA6IDVcbiAgICB9LFxuICAgIGdjY1N1cHByZXNzV2FybmluZ3M6IHtcbiAgICAgIHRpdGxlOiBcIlN1cHByZXNzIEdDQyBXYXJuaW5nc1wiLFxuICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIG9yZGVyIDogNlxuICAgIH0sXG4gICAgZ2NjRXJyb3JTdHJpbmc6IHtcbiAgICAgICAgdGl0bGU6IFwiU3RyaW5nIEdDQyBwcmVwZW5kcyB0byBlcnJvcnNcIixcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgZGVmYXVsdDogXCJlcnJvclwiLFxuICAgICAgICBvcmRlcjogN1xuICAgIH0sXG4gICAgZ2NjV2FybmluZ1N0cmluZzoge1xuICAgICAgICB0aXRsZTogXCJTdHJpbmcgR0NDIHByZXBlbmRzIHRvIHdhcm5pbmdzXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIGRlZmF1bHQ6IFwid2FybmluZ1wiLFxuICAgICAgICBvcmRlcjogOFxuICAgIH0sXG4gICAgZ2NjTm90ZVN0cmluZzoge1xuICAgICAgICB0aXRsZTogXCJTdHJpbmcgR0NDIHByZXBlbmRzIHRvIG5vdGVzXCIsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIGRlZmF1bHQ6IFwibm90ZVwiLFxuICAgICAgICBvcmRlcjogOVxuICAgIH0sXG4gICAgZ2NjTGludE9uVGhlRmx5OiB7XG4gICAgICB0aXRsZTogXCJMaW50IG9uLXRoZS1mbHlcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlBsZWFzZSBlbnN1cmUgYW55IGF1dG8tc2F2aW5nIHBhY2thZ2VzIGFyZSBkaXNhYmxlZCBiZWZvcmUgdXNpbmcgdGhpcyBmZWF0dXJlXCIsXG4gICAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgb3JkZXIgOiAxMFxuICAgIH0sXG4gICAgZ2NjTGludE9uVGhlRmx5SW50ZXJ2YWw6IHtcbiAgICAgIHRpdGxlOiBcIkxpbnQgb24tdGhlLWZseSBJbnRlcnZhbFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiVGltZSBpbnRlcnZhbCAoaW4gbXMpIGJldHdlZW4gbGludGluZ1wiLFxuICAgICAgdHlwZTogXCJpbnRlZ2VyXCIsXG4gICAgICBkZWZhdWx0OiAzMDAsXG4gICAgICBvcmRlciA6IDExXG4gICAgfSxcbiAgICBnY2NEZWJ1Zzoge1xuICAgICAgdGl0bGU6IFwiU2hvdyBEZWJ1Z2dpbmcgTWVzc2FnZXNcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlBsZWFzZSByZWFkIHRoZSBsaW50ZXItZ2NjIHdpa2kgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9oZWJhaXNoaS9saW50ZXItZ2NjL3dpa2kpIGJlZm9yZSByZXBvcnRpbmcgYW55IGlzc3Vlcy5cIixcbiAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICBvcmRlciA6IDEyXG4gICAgfVxuICB9LFxuXG4gIG1lc3NhZ2VzOiB7fSxcbiAgbGludGVyX2djYzogdW5kZWZpbmVkLFxuXG4gIHRlbXBfZmlsZSA6IHtcbiAgICBcIkMrK1wiOiByZXF1aXJlKFwidGVtcGZpbGVcIikoXCIuY3BwXCIpLFxuICAgIFwiQ1wiOiByZXF1aXJlKFwidGVtcGZpbGVcIikoXCIuY1wiKVxuICB9LFxuXG4gIGxpbnQ6IGZ1bmN0aW9uKGVkaXRvciwgbGludGVkX2ZpbGUsIHJlYWxfZmlsZSl7XG4gICAgY29uc3QgaGVscGVycz1yZXF1aXJlKFwiYXRvbS1saW50ZXJcIik7XG4gICAgY29uc3QgcmVnZXggPSBgKD88ZmlsZT4uKyk6KD88bGluZT5cXFxcZCspOig/PGNvbD5cXFxcZCspOlxcXFxzKlxcXFx3KlxcXFxzKig/PHR5cGU+KCR7YXRvbS5jb25maWcuZ2V0KFwibGludGVyLWdjYy5nY2NFcnJvclN0cmluZ1wiKX18JHthdG9tLmNvbmZpZy5nZXQoXCJsaW50ZXItZ2NjLmdjY1dhcm5pbmdTdHJpbmdcIil9fCR7YXRvbS5jb25maWcuZ2V0KFwibGludGVyLWdjYy5nY2NOb3RlU3RyaW5nXCIpfSkpOlxcXFxzKig/PG1lc3NhZ2U+LiopYFxuICAgIGNvbW1hbmQgPSByZXF1aXJlKFwiLi91dGlsaXR5XCIpLmJ1aWxkQ29tbWFuZChlZGl0b3IsIGxpbnRlZF9maWxlKTtcbiAgICByZXR1cm4gaGVscGVycy5leGVjKGNvbW1hbmQuYmluYXJ5LCBjb21tYW5kLmFyZ3MsIHtzdHJlYW06IFwic3RkZXJyXCJ9KS50aGVuKG91dHB1dCA9PiB7XG4gICAgICBtc2dzID0gaGVscGVycy5wYXJzZShvdXRwdXQsIHJlZ2V4KVxuICAgICAgbXNncy5mb3JFYWNoKGZ1bmN0aW9uKGVudHJ5KXtcbiAgICAgICAgaWYgKGVudHJ5LmZpbGVQYXRoID09PSBtb2R1bGUuZXhwb3J0cy50ZW1wX2ZpbGVbXCJDXCJdIHx8IGVudHJ5LmZpbGVQYXRoID09PSBtb2R1bGUuZXhwb3J0cy50ZW1wX2ZpbGVbXCJDKytcIl0pe1xuICAgICAgICAgIGVudHJ5LmZpbGVQYXRoID0gcmVhbF9maWxlO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgaWYgKG1zZ3MubGVuZ3RoID09IDAgJiYgb3V0cHV0LmluZGV4T2YoXCJlcnJvclwiKSAhPSAtMSl7XG4gICAgICAgIG1zZ3MgPSBbe1xuICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgdGV4dDogb3V0cHV0LFxuICAgICAgICAgIGZpbGVQYXRoOiByZWFsX2ZpbGVcbiAgICAgICAgfV07XG4gICAgICB9XG4gICAgICBtb2R1bGUuZXhwb3J0cy5tZXNzYWdlc1tyZWFsX2ZpbGVdID0gbXNncztcbiAgICAgIC8vIGNvbnNvbGUubG9nKG1zZ3MpXG4gICAgICBpZiAodHlwZW9mIG1vZHVsZS5leHBvcnRzLmxpbnRlcl9nY2MgIT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzLmxpbnRlcl9nY2Muc2V0TWVzc2FnZXMoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXF1aXJlKFwiLi91dGlsaXR5XCIpLmZsYXR0ZW5IYXNoKG1vZHVsZS5leHBvcnRzLm1lc3NhZ2VzKSkpKVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1zZ3M7XG4gICAgfSlcbiAgfSxcblxuICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIGlmKCFhdG9tLnBhY2thZ2VzLmdldExvYWRlZFBhY2thZ2VzKFwibGludGVyXCIpKSB7XG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZEVycm9yKFxuICAgICAgXCJMaW50ZXIgcGFja2FnZSBub3QgZm91bmQuXCIsXG4gICAgICB7XG4gICAgICAgIGRldGFpbDogXCJQbGVhc2UgaW5zdGFsbCB0aGUgYGxpbnRlcmAgcGFja2FnZSBpbiB5b3VyIFNldHRpbmdzIHZpZXcuXCJcbiAgICAgIH1cbiAgICApO1xuICAgIH1cbiAgICByZXF1aXJlKFwiYXRvbS1wYWNrYWdlLWRlcHNcIikuaW5zdGFsbChcImxpbnRlci1nY2NcIik7XG4gICAgdGltZV9sYXN0X2xpbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIGxpbnRfd2FpdGluZyA9IGZhbHNlXG4gIH0sXG4gIGRlYWN0aXZhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5kaXNwb3NlKClcbiAgfSxcbiAgY29uc3VtZUxpbnRlcjogZnVuY3Rpb24oaW5kaWVSZWdpc3RyeSkge1xuICAgIG1vZHVsZS5leHBvcnRzLmxpbnRlcl9nY2MgPSBpbmRpZVJlZ2lzdHJ5LnJlZ2lzdGVyKHtcbiAgICAgIG5hbWU6ICdHQ0MnXG4gICAgfSlcblxuICAgIHN1YnMgPSB0aGlzLnN1YnNjcmlwdGlvbnM7XG4gICAgdXRpbGl0eSA9IHJlcXVpcmUoXCIuL3V0aWxpdHlcIilcbiAgICBsaW50T25UaGVGbHkgPSBmdW5jdGlvbigpIHtcbiAgICAgIGVkaXRvciA9IHV0aWxpdHkuZ2V0VmFsaWRFZGl0b3IoYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpKTtcbiAgICAgIGlmICghZWRpdG9yKSByZXR1cm47XG4gICAgICBpZiAoYXRvbS5jb25maWcuZ2V0KFwibGludGVyLWdjYy5nY2NMaW50T25UaGVGbHlcIikgPT0gZmFsc2UpIHJldHVybjtcbiAgICAgIGlmIChsaW50X3dhaXRpbmcpIHJldHVybjtcbiAgICAgIGxpbnRfd2FpdGluZyA9IHRydWVcbiAgICAgIGludGVydmFsID0gYXRvbS5jb25maWcuZ2V0KFwibGludGVyLWdjYy5nY2NMaW50T25UaGVGbHlJbnRlcnZhbFwiKVxuICAgICAgdGltZV9ub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgdGltZW91dCA9IGludGVydmFsIC0gKHRpbWVfbm93IC0gdGltZV9sYXN0X2xpbnQpO1xuICAgICAgc2V0VGltZW91dChcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGltZV9sYXN0X2xpbnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgICAgIGxpbnRfd2FpdGluZyA9IGZhbHNlXG4gICAgICAgICAgZ3JhbW1hcl90eXBlID0gdXRpbGl0eS5ncmFtbWFyVHlwZShlZGl0b3IuZ2V0R3JhbW1hcigpLm5hbWUpXG4gICAgICAgICAgZmlsZW5hbWUgPSBTdHJpbmcobW9kdWxlLmV4cG9ydHMudGVtcF9maWxlW2dyYW1tYXJfdHlwZV0pXG4gICAgICAgICAgcmVxdWlyZSgnZnMtZXh0cmEnKS5vdXRwdXRGaWxlU3luYyhmaWxlbmFtZSwgZWRpdG9yLmdldFRleHQoKSk7XG4gICAgICAgICAgbW9kdWxlLmV4cG9ydHMubGludChlZGl0b3IsIGZpbGVuYW1lLCBlZGl0b3IuZ2V0UGF0aCgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgdGltZW91dFxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgbGludE9uU2F2ZSA9IGZ1bmN0aW9uKCl7XG4gICAgICBlZGl0b3IgPSB1dGlsaXR5LmdldFZhbGlkRWRpdG9yKGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKSk7XG4gICAgICBpZiAoIWVkaXRvcikgcmV0dXJuO1xuICAgICAgaWYgKGF0b20uY29uZmlnLmdldChcImxpbnRlci1nY2MuZ2NjTGludE9uVGhlRmx5XCIpID09IHRydWUpIHJldHVybjtcbiAgICAgIHJlYWxfZmlsZSA9IGVkaXRvci5nZXRQYXRoKCk7XG4gICAgICBtb2R1bGUuZXhwb3J0cy5saW50KGVkaXRvciwgcmVhbF9maWxlLCByZWFsX2ZpbGUpO1xuICAgIH07XG5cbiAgICBjbGVhbnVwTWVzc2FnZXMgPSBmdW5jdGlvbigpe1xuICAgICAgZWRpdG9yX2hhc2ggPSB7fTtcbiAgICAgIGF0b20ud29ya3NwYWNlLmdldFRleHRFZGl0b3JzKCkuZm9yRWFjaCggZnVuY3Rpb24oZW50cnkpe1xuICAgICAgICB0cnl7XG4gICAgICAgICAgcGF0aCA9IGVudHJ5LmdldFBhdGgoKVxuICAgICAgICB9IGNhdGNoKGVycil7XG4gICAgICAgIH1cbiAgICAgICAgZWRpdG9yX2hhc2hbZW50cnkuZ2V0UGF0aCgpXSA9IDE7XG4gICAgICB9KTtcbiAgICAgIGZvciAodmFyIGZpbGUgaW4gbW9kdWxlLmV4cG9ydHMubWVzc2FnZXMpe1xuICAgICAgICBpZiAoIWVkaXRvcl9oYXNoLmhhc093blByb3BlcnR5KGZpbGUpKXtcbiAgICAgICAgICBkZWxldGUgbW9kdWxlLmV4cG9ydHMubWVzc2FnZXNbZmlsZV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbW9kdWxlLmV4cG9ydHMubGludGVyX2djYy5zZXRNZXNzYWdlcyhKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlcXVpcmUoXCIuL3V0aWxpdHlcIikuZmxhdHRlbkhhc2gobW9kdWxlLmV4cG9ydHMubWVzc2FnZXMpKSkpO1xuICAgIH07XG5cbiAgICBzdWJzLmFkZChtb2R1bGUuZXhwb3J0cy5saW50ZXJfZ2NjKVxuXG4gICAgYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKGZ1bmN0aW9uKGVkaXRvcikge1xuICAgICAgc3Vicy5hZGQoZWRpdG9yLm9uRGlkU2F2ZShsaW50T25TYXZlKSlcbiAgICAgIHN1YnMuYWRkKGVkaXRvci5vbkRpZFN0b3BDaGFuZ2luZyhsaW50T25UaGVGbHkpKVxuICAgICAgc3Vicy5hZGQoZWRpdG9yLm9uRGlkRGVzdHJveShjbGVhbnVwTWVzc2FnZXMpKVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==
//# sourceURL=/home/takaaki/.atom/packages/linter-gcc/lib/main.js
