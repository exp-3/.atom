"use babel";

describe('The GCC provider for AtomLinter', function () {
  var main = require('../lib/main');
  var utility = require('../lib/utility.js');
  var settings = require("../lib/config").settings;

  beforeEach(function () {
    waitsForPromise(function () {
      atom.config.set('linter-gcc.execPath', '/usr/bin/g++');
      atom.config.set('linter-gcc.gccDefaultCFlags', '-Wall');
      atom.config.set('linter-gcc.gccDefaultCppFlags', '-Wall -std=c++11');
      atom.config.set('linter-gcc.gccErrorLimit', 15);
      atom.config.set('linter-gcc.gccIncludePaths', ' ');
      atom.config.set('linter-gcc.gccSuppressWarnings', true);
      main.messages = {};
      return atom.packages.activatePackage('linter-gcc');
    });
  });

  it('finds one error in error.cpp', function () {
    waitsForPromise(function () {
      filename = __dirname + '/files/error.cpp';
      return atom.workspace.open(filename).then(function (editor) {
        main.lint(editor, editor.getPath(), editor.getPath()).then(function () {
          var length = utility.flattenHash(main.messages).length;
          expect(length).toEqual(1);
        });
      });
    });
  });

  it('finds no errors in comment.cpp', function () {
    waitsForPromise(function () {
      filename = __dirname + '/files/comment.cpp';
      return atom.workspace.open(filename).then(function (editor) {
        main.lint(editor, editor.getPath(), editor.getPath()).then(function () {
          var length = utility.flattenHash(main.messages).length;
          expect(length).toEqual(0);
        });
      });
    });
  });

  it('finds one error in error.c', function () {
    waitsForPromise(function () {
      filename = __dirname + '/files/error.c';
      return atom.workspace.open(filename).then(function (editor) {
        main.lint(editor, editor.getPath(), editor.getPath()).then(function () {
          var length = utility.flattenHash(main.messages).length;
          expect(length).toEqual(1);
        });
      });
    });
  });

  it('finds no errors in comment.c', function () {
    waitsForPromise(function () {
      filename = __dirname + '/files/comment.c';
      return atom.workspace.open(filename).then(function (editor) {
        main.lint(editor, editor.getPath(), editor.getPath()).then(function () {
          var length = utility.flattenHash(main.messages).length;
          expect(length).toEqual(0);
        });
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3Rha2Fha2kvLmF0b20vcGFja2FnZXMvbGludGVyLWdjYy9zcGVjL2xpbnRlci1nY2Mtc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7O0FBRVosUUFBUSxDQUFDLGlDQUFpQyxFQUFFLFlBQU07QUFDaEQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQ25DLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0FBQzVDLE1BQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUE7O0FBRWhELFlBQVUsQ0FBQyxZQUFNO0FBQ2YsbUJBQWUsQ0FBQyxZQUFNO0FBQ3BCLFVBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLGNBQWMsQ0FBQyxDQUFBO0FBQ3RELFVBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDZCQUE2QixFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBQ3ZELFVBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLCtCQUErQixFQUFFLGtCQUFrQixDQUFDLENBQUE7QUFDcEUsVUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDL0MsVUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDbEQsVUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDdkQsVUFBSSxDQUFDLFFBQVEsR0FBQyxFQUFFLENBQUM7QUFDakIsYUFBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQTtLQUNuRCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7O0FBRUYsSUFBRSxDQUFDLDhCQUE4QixFQUFFLFlBQU07QUFDdkMsbUJB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QUFDLENBQUE7T0FDSCxDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSCxDQUFDLENBQUE7Q0FDSCxDQUFDLENBQUEiLCJmaWxlIjoiL2hvbWUvdGFrYWFraS8uYXRvbS9wYWNrYWdlcy9saW50ZXItZ2NjL3NwZWMvbGludGVyLWdjYy1zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgYmFiZWxcIjtcblxuZGVzY3JpYmUoJ1RoZSBHQ0MgcHJvdmlkZXIgZm9yIEF0b21MaW50ZXInLCAoKSA9PiB7XG4gIGNvbnN0IG1haW4gPSByZXF1aXJlKCcuLi9saWIvbWFpbicpXG4gIGNvbnN0IHV0aWxpdHkgPSByZXF1aXJlKCcuLi9saWIvdXRpbGl0eS5qcycpXG4gIHZhciBzZXR0aW5ncyA9IHJlcXVpcmUoXCIuLi9saWIvY29uZmlnXCIpLnNldHRpbmdzXG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgd2FpdHNGb3JQcm9taXNlKCgpID0+IHtcbiAgICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLWdjYy5leGVjUGF0aCcsICcvdXNyL2Jpbi9nKysnKVxuICAgICAgYXRvbS5jb25maWcuc2V0KCdsaW50ZXItZ2NjLmdjY0RlZmF1bHRDRmxhZ3MnLCAnLVdhbGwnKVxuICAgICAgYXRvbS5jb25maWcuc2V0KCdsaW50ZXItZ2NjLmdjY0RlZmF1bHRDcHBGbGFncycsICctV2FsbCAtc3RkPWMrKzExJylcbiAgICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLWdjYy5nY2NFcnJvckxpbWl0JywgMTUpXG4gICAgICBhdG9tLmNvbmZpZy5zZXQoJ2xpbnRlci1nY2MuZ2NjSW5jbHVkZVBhdGhzJywgJyAnKVxuICAgICAgYXRvbS5jb25maWcuc2V0KCdsaW50ZXItZ2NjLmdjY1N1cHByZXNzV2FybmluZ3MnLCB0cnVlKVxuICAgICAgbWFpbi5tZXNzYWdlcz17fTtcbiAgICAgIHJldHVybiBhdG9tLnBhY2thZ2VzLmFjdGl2YXRlUGFja2FnZSgnbGludGVyLWdjYycpXG4gICAgfSlcbiAgfSlcblxuICBpdCgnZmluZHMgb25lIGVycm9yIGluIGVycm9yLmNwcCcsICgpID0+IHtcbiAgICB3YWl0c0ZvclByb21pc2UoKCkgPT4ge1xuICAgICAgZmlsZW5hbWUgPSBfX2Rpcm5hbWUgKyAnL2ZpbGVzL2Vycm9yLmNwcCdcbiAgICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5vcGVuKGZpbGVuYW1lKS50aGVuKGVkaXRvciA9PiB7XG4gICAgICAgIG1haW4ubGludChlZGl0b3IsIGVkaXRvci5nZXRQYXRoKCksIGVkaXRvci5nZXRQYXRoKCkpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gdXRpbGl0eS5mbGF0dGVuSGFzaChtYWluLm1lc3NhZ2VzKS5sZW5ndGhcbiAgICAgICAgICBleHBlY3QobGVuZ3RoKS50b0VxdWFsKDEpO1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdmaW5kcyBubyBlcnJvcnMgaW4gY29tbWVudC5jcHAnLCAoKSA9PiB7XG4gICAgd2FpdHNGb3JQcm9taXNlKCgpID0+IHtcbiAgICAgIGZpbGVuYW1lID0gX19kaXJuYW1lICsgJy9maWxlcy9jb21tZW50LmNwcCdcbiAgICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5vcGVuKGZpbGVuYW1lKS50aGVuKGVkaXRvciA9PiB7XG4gICAgICAgIG1haW4ubGludChlZGl0b3IsIGVkaXRvci5nZXRQYXRoKCksIGVkaXRvci5nZXRQYXRoKCkpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gdXRpbGl0eS5mbGF0dGVuSGFzaChtYWluLm1lc3NhZ2VzKS5sZW5ndGhcbiAgICAgICAgICBleHBlY3QobGVuZ3RoKS50b0VxdWFsKDApO1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdmaW5kcyBvbmUgZXJyb3IgaW4gZXJyb3IuYycsICgpID0+IHtcbiAgICB3YWl0c0ZvclByb21pc2UoKCkgPT4ge1xuICAgICAgZmlsZW5hbWUgPSBfX2Rpcm5hbWUgKyAnL2ZpbGVzL2Vycm9yLmMnXG4gICAgICByZXR1cm4gYXRvbS53b3Jrc3BhY2Uub3BlbihmaWxlbmFtZSkudGhlbihlZGl0b3IgPT4ge1xuICAgICAgICBtYWluLmxpbnQoZWRpdG9yLCBlZGl0b3IuZ2V0UGF0aCgpLCBlZGl0b3IuZ2V0UGF0aCgpKS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IHV0aWxpdHkuZmxhdHRlbkhhc2gobWFpbi5tZXNzYWdlcykubGVuZ3RoXG4gICAgICAgICAgZXhwZWN0KGxlbmd0aCkudG9FcXVhbCgxKTtcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcblxuICBpdCgnZmluZHMgbm8gZXJyb3JzIGluIGNvbW1lbnQuYycsICgpID0+IHtcbiAgICB3YWl0c0ZvclByb21pc2UoKCkgPT4ge1xuICAgICAgZmlsZW5hbWUgPSBfX2Rpcm5hbWUgKyAnL2ZpbGVzL2NvbW1lbnQuYydcbiAgICAgIHJldHVybiBhdG9tLndvcmtzcGFjZS5vcGVuKGZpbGVuYW1lKS50aGVuKGVkaXRvciA9PiB7XG4gICAgICAgIG1haW4ubGludChlZGl0b3IsIGVkaXRvci5nZXRQYXRoKCksIGVkaXRvci5nZXRQYXRoKCkpLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gdXRpbGl0eS5mbGF0dGVuSGFzaChtYWluLm1lc3NhZ2VzKS5sZW5ndGhcbiAgICAgICAgICBleHBlY3QobGVuZ3RoKS50b0VxdWFsKDApO1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==
//# sourceURL=/home/takaaki/.atom/packages/linter-gcc/spec/linter-gcc-spec.js
